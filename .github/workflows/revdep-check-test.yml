name: Reverse Dependency Check, Including Tests

on:
  workflow_dispatch: {}

jobs:
  revdep_cran:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - name: System libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libfreetype6-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev \
            libpng-dev libjpeg-dev libtiff5-dev \
            gfortran libblas-dev liblapack-dev

      - name: Install tools explicitly (no cache)
        run: |
          Rscript -e 'if (!requireNamespace("pak", quietly=TRUE)) install.packages("pak", repos="https://cloud.r-project.org")'
          Rscript -e 'pak::pkg_install(c("github::r-lib/revdepcheck","cran::rcmdcheck","cran::remotes"))'

      - name: Install ptetools deps
        run: |
          Rscript -e "options(repos=c(CRAN='https://cloud.r-project.org')); remotes::install_deps(dependencies=TRUE)"

      - name: Run revdepcheck (CRAN/Bioc reverse deps of ptetools)
        env:
          _R_CHECK_FORCE_SUGGESTS_: "false"   # keep tests ON, but avoid heavy Suggests
          WORKERS: "2"                        # parallelism within runner
          CHECK_ARGS: "--no-manual"
        run: |
          Rscript -e "
            options(repos=c(CRAN='https://cloud.r-project.org'))
            dir.create('revdep', showWarnings=FALSE)
            revdepcheck::revdep_check(
              path='.',
              num_workers=as.integer(Sys.getenv('WORKERS')),
              quiet=FALSE,
              args=Sys.getenv('CHECK_ARGS')
            )
          "

      - name: Fail build if any reverse dep has errors
        if: always()
        run: |
          Rscript -e "
            s <- revdepcheck::revdep_summary()
            if (is.null(s)) quit(status=0)
            print(s)
            has_err <- any(s$errors > 0, na.rm=TRUE)
            if (has_err) {
              message('One or more reverse dependencies have errors.')
              quit(status=1)
            }
          "

      - name: Upload revdepcheck results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: revdep-CRAN-results
          path: revdep/

  gh_deps:
    runs-on: ubuntu-latest
    needs: revdep_cran
    env:
      # ==== HARD-CODED GitHub reverse dependents ====
      GH_REPOS: |
        bcallaway11/ife
        bcallaway11/qte
      CHECK_ARGS: "--no-manual"
    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - name: System libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libfreetype6-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev \
            libpng-dev libjpeg-dev libtiff5-dev \
            gfortran libblas-dev liblapack-dev

      - name: Install tools (cached)
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: any::rcmdcheck
          cache-version: 1

      - name: Check GitHub reverse dependents (sequential)
        env:
          GH_REPOS: |
            owner1/repoA
            owner2/repoB
          CHECK_ARGS: --no-manual
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p gh_src gh_results
          python3 - <<'PY'
          import os, subprocess, sys, pathlib
          repos = [r.strip() for r in os.environ.get("GH_REPOS","").splitlines() if r.strip()]
          fail = False
          for repo in repos:
              dest = f"gh_src/{repo.replace('/', '__')}"
              print(f"== Cloning {repo} ==")
              subprocess.run(["git","clone","--depth","1",f"https://github.com/{repo}",dest], check=False)
              outdir = f"gh_results/{repo.replace('/', '__')}"
              pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)
              # Run R CMD check with tests; fail on errors
              cmd = [
                  "Rscript","-e",
                  f"res<-rcmdcheck::rcmdcheck('{dest}', build=TRUE, error_on='error', args='{os.environ.get('CHECK_ARGS','')}'); rcmdcheck::save_logs(res, '{outdir}')"
              ]
              print(f"== rcmdcheck for {repo} ==")
              rc = subprocess.call(cmd)
              if rc != 0:
                  print(f\"!! {repo} check failed\")
                  fail = True
          print('GitHub checks done.')
          sys.exit(1 if fail else 0)
          PY


      - name: Upload GitHub results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: revdep-GitHub-results
          path: gh_results/
